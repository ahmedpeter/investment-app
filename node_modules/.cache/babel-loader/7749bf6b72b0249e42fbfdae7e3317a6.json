{"ast":null,"code":"var _jsxFileName = \"/Users/primalaero/investment/src/Util/AuthContext.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { createContext, useState, useEffect } from 'react-dom';\nimport jwt_decode from \"jwt-decode\";\nimport { useHistory } from 'react-router-dom'; //  const AuthContext = createContext();\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/React.createContext();\nexport default AuthContext;\nexport const AuthProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  let [authTokens, setAuthTokens] = useState(() => localStorage.getItem('authTokens') ? JSON.parse(localStorage.getItem('authTokens')) : null);\n  let [user, setUser] = useState(() => localStorage.getItem('authTokens') ? jwt_decode(localStorage.getItem('authTokens')) : null);\n  let [loading, setLoading] = useState(true);\n  const history = useHistory(); // let loginUser = async (e)=> {\n  //     e.preventDefault()\n  //     let response = await fetch('', {\n  //         method:'POST',\n  //         headers: {\n  //             'Content-Type': 'application/json'\n  //         },\n  //         body:JSON.stringify({'username':e.target.username.value, 'password: e.target.password.value'})\n  //     })\n  //     let data = await response.json()\n  //     if(response.status === 200){\n  //         setAuthTokens(data)\n  //         setUser(jwt_decode(data.accesstoken))\n  //         localStorage.setItem('authTokens', JSON.stringify(data))\n  //         history.push('/')\n  //     }else {\n  //         alert('Something went wrong')\n  //     }\n  // }\n\n  let logOutUser = () => {\n    setAuthTokens(null);\n    setUser(null);\n    localStorage.removeItem('authTokens');\n    history.push('/login');\n  };\n\n  let updateToken = async () => {\n    let response = await fetch('https://dry-falls-41890.herokuapp.com/api/v1/token', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        'refresh': authTokens === null || authTokens === void 0 ? void 0 : authTokens.refreshToken\n      })\n    });\n    let data = await response.json();\n\n    if (response.status === 200) {\n      setAuthTokens(data);\n      setUser(jwt_decode(data.accessToken));\n      localStorage.setItem('authTokens', JSON.stringify(data));\n    } else {\n      logOutUser();\n    }\n\n    if (loading) {\n      setLoading(false);\n    }\n  };\n\n  let contextData = {\n    user: user,\n    authTokens: authTokens,\n    // loginUser:loginUser,\n    logOutUser: logOutUser\n  };\n  useEffect(() => {\n    if (loading) {\n      updateToken();\n    }\n\n    let fiveMinutes = 1000 * 60 * 5;\n    let interval = setInterval(() => {\n      if (authTokens) {\n        updateToken();\n      }\n    }, fiveMinutes);\n    return () => clearInterval(interval);\n  }, [authTokens, loading]);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextData,\n    children: loading ? null : children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AuthProvider, \"QfEr+CswniJk+dabu5iJ57WLQLU=\", false, function () {\n  return [useHistory];\n});\n\n_c = AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["/Users/primalaero/investment/src/Util/AuthContext.js"],"names":["React","createContext","useState","useEffect","jwt_decode","useHistory","AuthContext","AuthProvider","children","authTokens","setAuthTokens","localStorage","getItem","JSON","parse","user","setUser","loading","setLoading","history","logOutUser","removeItem","push","updateToken","response","fetch","method","headers","body","stringify","refreshToken","data","json","status","accessToken","setItem","contextData","fiveMinutes","interval","setInterval","clearInterval"],"mappings":"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","sourcesContent":["import React from 'react';\n import { createContext, useState, useEffect} from 'react-dom';\n import jwt_decode from \"jwt-decode\";\n import {useHistory } from 'react-router-dom';\n\n\n\n//  const AuthContext = createContext();\n const AuthContext = React.createContext();\n\n export default AuthContext;\n\n export const AuthProvider = ({children})=>{\n     let [authTokens, setAuthTokens] = useState(()=>localStorage.getItem('authTokens') ? JSON.parse(localStorage.getItem('authTokens')): null)\n     let [user, setUser] = useState(()=>localStorage.getItem('authTokens') ? jwt_decode(localStorage.getItem('authTokens')): null);\n    let [loading, setLoading]  = useState(true);\n\n    const history = useHistory();\n\n    // let loginUser = async (e)=> {\n    //     e.preventDefault()\n    //     let response = await fetch('', {\n    //         method:'POST',\n    //         headers: {\n    //             'Content-Type': 'application/json'\n    //         },\n    //         body:JSON.stringify({'username':e.target.username.value, 'password: e.target.password.value'})\n    //     })\n\n    //     let data = await response.json()\n    //     if(response.status === 200){\n    //         setAuthTokens(data)\n    //         setUser(jwt_decode(data.accesstoken))\n    //         localStorage.setItem('authTokens', JSON.stringify(data))\n    //         history.push('/')\n    //     }else {\n    //         alert('Something went wrong')\n    //     }\n    // }\n\n    let logOutUser = () => {\n        setAuthTokens(null)\n        setUser(null)\n        localStorage.removeItem('authTokens')\n        history.push('/login')\n    }\n\n\n    let updateToken = async ()=> {\n        let response = await fetch('https://dry-falls-41890.herokuapp.com/api/v1/token', {\n            method: 'POST',\n            headers: { \n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({'refresh': authTokens?.refreshToken})\n        })\n\n        let data = await response.json()\n        if(response.status === 200){\n            setAuthTokens(data)\n            setUser(jwt_decode(data.accessToken))\n            localStorage.setItem('authTokens', JSON.stringify(data))\n        }else {\n            logOutUser()\n        }\n\n        if(loading){\n            setLoading(false);\n        }\n    }\n\n    let contextData = {\n        user:user,\n        authTokens: authTokens,\n        // loginUser:loginUser,\n        logOutUser:logOutUser\n    }\n\n\n    useEffect(()=> {\n        if(loading){\n            updateToken()\n        }\n        let fiveMinutes = 1000 * 60 * 5\n        let interval = setInterval(()=>{\n            if(authTokens){\n                updateToken()\n            }\n        }, fiveMinutes)\n        return ()=> clearInterval(interval)\n    }, [authTokens, loading])\n\n    return(\n        <AuthContext.Provider value={contextData} >\n            {loading ? null : children }\n        </AuthContext.Provider>\n    )\n\n\n\n\n    }"]},"metadata":{},"sourceType":"module"}