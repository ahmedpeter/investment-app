{"ast":null,"code":"import axios from \"axios\"; //   import Router from \"next/router\";\n\nconst API_URL = process.env.NEXT_PUBLIC_ENDPOINT_AUTH;\n\nconst onRequest = config => {\n  const token = localStorage.getItem(\"accessToken\");\n  config.headers[\"Authorization\"] = `Bearer ${accessToken}`;\n  return config;\n};\n\nconst onRequestError = error => {\n  return Promise.reject(error);\n  console.log('i am here');\n};\n\nconst onResponse = response => {\n  return response;\n};\n\nconst onResponseError = async error => {\n  if (error.response) {\n    // Access Token was expired\n    if (error.response.status === 401 && error.response.data.message === \"jwt expired\") {\n      const storedToken = JSON.parse(localStorage.getItem(\"token\"));\n\n      try {\n        const res = await axios.post(`${API_URL}/token`, {\n          refreshToken: storedToken.refreshToken\n        });\n        const {\n          token,\n          user\n        } = res.data;\n        localStorage.setItem(\"token\", JSON.stringify(token));\n        localStorage.setItem(\"user\", JSON.stringify(user));\n        return;\n      } catch (_error) {\n        return Promise.reject(_error);\n      }\n    }\n  }\n\n  return Promise.reject(error);\n};\n\nexport const setupInterceptorsTo = axiosInstance => {\n  axiosInstance.interceptors.request.use(onRequest, onRequestError);\n  axiosInstance.interceptors.response.use(onResponse, onResponseError);\n  return axiosInstance;\n};","map":{"version":3,"sources":["/Users/primalaero/investment/src/Util/Interceptors.js"],"names":["axios","API_URL","process","env","NEXT_PUBLIC_ENDPOINT_AUTH","onRequest","config","token","localStorage","getItem","headers","accessToken","onRequestError","error","Promise","reject","console","log","onResponse","response","onResponseError","status","data","message","storedToken","JSON","parse","res","post","refreshToken","user","setItem","stringify","_error","setupInterceptorsTo","axiosInstance","interceptors","request","use"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AAEE,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,yBAA5B;;AAEA,MAAMC,SAAS,GAAIC,MAAD,IAAY;AAC5B,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAd;AACAH,EAAAA,MAAM,CAACI,OAAP,CAAe,eAAf,IAAmC,UAASC,WAAY,EAAxD;AACA,SAAOL,MAAP;AACD,CAJD;;AAMA,MAAMM,cAAc,GAAIC,KAAD,IAAW;AAChC,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACD,CAHD;;AAKA,MAAMC,UAAU,GAAIC,QAAD,IAAc;AAC/B,SAAOA,QAAP;AACD,CAFD;;AAIA,MAAMC,eAAe,GAAG,MAAOP,KAAP,IAAiB;AACvC,MAAIA,KAAK,CAACM,QAAV,EAAoB;AAClB;AACA,QACEN,KAAK,CAACM,QAAN,CAAeE,MAAf,KAA0B,GAA1B,IACAR,KAAK,CAACM,QAAN,CAAeG,IAAf,CAAoBC,OAApB,KAAgC,aAFlC,EAGE;AACA,YAAMC,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWlB,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CAApB;;AAEA,UAAI;AACF,cAAMkB,GAAG,GAAG,MAAM3B,KAAK,CAAC4B,IAAN,CAAY,GAAE3B,OAAQ,QAAtB,EAA+B;AAC/C4B,UAAAA,YAAY,EAAEL,WAAW,CAACK;AADqB,SAA/B,CAAlB;AAIA,cAAM;AAAEtB,UAAAA,KAAF;AAASuB,UAAAA;AAAT,YAAkBH,GAAG,CAACL,IAA5B;AAEAd,QAAAA,YAAY,CAACuB,OAAb,CAAqB,OAArB,EAA8BN,IAAI,CAACO,SAAL,CAAezB,KAAf,CAA9B;AACAC,QAAAA,YAAY,CAACuB,OAAb,CAAqB,MAArB,EAA6BN,IAAI,CAACO,SAAL,CAAeF,IAAf,CAA7B;AAEA;AACD,OAXD,CAWE,OAAOG,MAAP,EAAe;AACf,eAAOnB,OAAO,CAACC,MAAR,CAAekB,MAAf,CAAP;AACD;AACF;AACF;;AACD,SAAOnB,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CA1BD;;AA4BA,OAAO,MAAMqB,mBAAmB,GAAKC,aAAF,IAAqB;AACtDA,EAAAA,aAAa,CAACC,YAAd,CAA2BC,OAA3B,CAAmCC,GAAnC,CAAuCjC,SAAvC,EAAkDO,cAAlD;AACAuB,EAAAA,aAAa,CAACC,YAAd,CAA2BjB,QAA3B,CAAoCmB,GAApC,CAAwCpB,UAAxC,EAAoDE,eAApD;AACA,SAAOe,aAAP;AACD,CAJM","sourcesContent":["import axios from \"axios\";\n//   import Router from \"next/router\";\n  \n  const API_URL = process.env.NEXT_PUBLIC_ENDPOINT_AUTH;\n  \n  const onRequest = (config) => {\n    const token = localStorage.getItem(\"accessToken\"); \n    config.headers[\"Authorization\"] = `Bearer ${accessToken}`;\n    return config;\n  };\n  \n  const onRequestError = (error) => {\n    return Promise.reject(error);\n    console.log('i am here')\n  };\n  \n  const onResponse = (response) => {\n    return response;\n  };\n  \n  const onResponseError = async (error) => {\n    if (error.response) {\n      // Access Token was expired\n      if (\n        error.response.status === 401 &&\n        error.response.data.message === \"jwt expired\"\n      ) {\n        const storedToken = JSON.parse(localStorage.getItem(\"token\"));\n  \n        try {\n          const res = await axios.post(`${API_URL}/token`, {\n            refreshToken: storedToken.refreshToken,\n          });\n  \n          const { token, user } = res.data;\n  \n          localStorage.setItem(\"token\", JSON.stringify(token));\n          localStorage.setItem(\"user\", JSON.stringify(user));\n  \n          return;\n        } catch (_error) {\n          return Promise.reject(_error);\n        }\n      }\n    }\n    return Promise.reject(error);\n  };\n  \n  export const setupInterceptorsTo = ( axiosInstance ) => {\n    axiosInstance.interceptors.request.use(onRequest, onRequestError);\n    axiosInstance.interceptors.response.use(onResponse, onResponseError);\n    return axiosInstance;\n  };"]},"metadata":{},"sourceType":"module"}