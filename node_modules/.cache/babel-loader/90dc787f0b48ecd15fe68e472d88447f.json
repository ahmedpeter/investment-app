{"ast":null,"code":"import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse } from \"axios\";\nimport Router from \"next/router\";\nconst API_URL = process.env.NEXT_PUBLIC_ENDPOINT_AUTH;\n\nconst onRequest = config => {\n  const token = JSON.parse(localStorage.getItem(\"token\"));\n  config.headers[\"Authorization\"] = `Bearer ${token.access_token}`;\n  return config;\n};\n\nconst onRequestError = error => {\n  return Promise.reject(error);\n};\n\nconst onResponse = response => {\n  return response;\n};\n\nconst onResponseError = async error => {\n  if (error.response) {\n    // Access Token was expired\n    if (error.response.status === 401 && error.response.data.message === \"jwt expired\") {\n      const storedToken = JSON.parse(localStorage.getItem(\"token\"));\n\n      try {\n        const rs = await axios.post(`${API_URL}/refresh`, {\n          refresh_token: storedToken.refresh_token\n        });\n        const {\n          token,\n          user\n        } = rs.data;\n        localStorage.setItem(\"token\", JSON.stringify(token));\n        localStorage.setItem(\"user\", JSON.stringify(user));\n        return;\n      } catch (_error) {\n        return Promise.reject(_error);\n      }\n    }\n  }\n\n  return Promise.reject(error);\n};\n\nexport const setupInterceptorsTo = axiosInstance => {\n  axiosInstance.interceptors.request.use(onRequest, onRequestError);\n  axiosInstance.interceptors.response.use(onResponse, onResponseError);\n  return axiosInstance;\n};","map":{"version":3,"sources":["/Users/primalaero/investment/src/Util/Interceptors.js"],"names":["axios","AxiosError","AxiosInstance","AxiosRequestConfig","AxiosResponse","Router","API_URL","process","env","NEXT_PUBLIC_ENDPOINT_AUTH","onRequest","config","token","JSON","parse","localStorage","getItem","headers","access_token","onRequestError","error","Promise","reject","onResponse","response","onResponseError","status","data","message","storedToken","rs","post","refresh_token","user","setItem","stringify","_error","setupInterceptorsTo","axiosInstance","interceptors","request","use"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,aAA5B,EAA2CC,kBAA3C,EAA+DC,aAA/D,QAAoF,OAApF;AACE,OAAOC,MAAP,MAAmB,aAAnB;AAEA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,yBAA5B;;AAEA,MAAMC,SAAS,GAAIC,MAAD,IAAY;AAC5B,QAAMC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CAAd;AACAL,EAAAA,MAAM,CAACM,OAAP,CAAe,eAAf,IAAmC,UAASL,KAAK,CAACM,YAAa,EAA/D;AAEA,SAAOP,MAAP;AACD,CALD;;AAOA,MAAMQ,cAAc,GAAIC,KAAD,IAAW;AAChC,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CAFD;;AAIA,MAAMG,UAAU,GAAIC,QAAD,IAAc;AAC/B,SAAOA,QAAP;AACD,CAFD;;AAIA,MAAMC,eAAe,GAAG,MAAOL,KAAP,IAAiB;AACvC,MAAIA,KAAK,CAACI,QAAV,EAAoB;AAClB;AACA,QACEJ,KAAK,CAACI,QAAN,CAAeE,MAAf,KAA0B,GAA1B,IACAN,KAAK,CAACI,QAAN,CAAeG,IAAf,CAAoBC,OAApB,KAAgC,aAFlC,EAGE;AACA,YAAMC,WAAW,GAAGhB,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CAApB;;AAEA,UAAI;AACF,cAAMc,EAAE,GAAG,MAAM9B,KAAK,CAAC+B,IAAN,CAAY,GAAEzB,OAAQ,UAAtB,EAAiC;AAChD0B,UAAAA,aAAa,EAAEH,WAAW,CAACG;AADqB,SAAjC,CAAjB;AAIA,cAAM;AAAEpB,UAAAA,KAAF;AAASqB,UAAAA;AAAT,YAAkBH,EAAE,CAACH,IAA3B;AAEAZ,QAAAA,YAAY,CAACmB,OAAb,CAAqB,OAArB,EAA8BrB,IAAI,CAACsB,SAAL,CAAevB,KAAf,CAA9B;AACAG,QAAAA,YAAY,CAACmB,OAAb,CAAqB,MAArB,EAA6BrB,IAAI,CAACsB,SAAL,CAAeF,IAAf,CAA7B;AAEA;AACD,OAXD,CAWE,OAAOG,MAAP,EAAe;AACf,eAAOf,OAAO,CAACC,MAAR,CAAec,MAAf,CAAP;AACD;AACF;AACF;;AACD,SAAOf,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CA1BD;;AA4BA,OAAO,MAAMiB,mBAAmB,GAAKC,aAAF,IAAqB;AACtDA,EAAAA,aAAa,CAACC,YAAd,CAA2BC,OAA3B,CAAmCC,GAAnC,CAAuC/B,SAAvC,EAAkDS,cAAlD;AACAmB,EAAAA,aAAa,CAACC,YAAd,CAA2Bf,QAA3B,CAAoCiB,GAApC,CAAwClB,UAAxC,EAAoDE,eAApD;AACA,SAAOa,aAAP;AACD,CAJM","sourcesContent":["import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse } from \"axios\";\n  import Router from \"next/router\";\n  \n  const API_URL = process.env.NEXT_PUBLIC_ENDPOINT_AUTH;\n  \n  const onRequest = (config) => {\n    const token = JSON.parse(localStorage.getItem(\"token\"));\n    config.headers[\"Authorization\"] = `Bearer ${token.access_token}`;\n  \n    return config;\n  };\n  \n  const onRequestError = (error) => {\n    return Promise.reject(error);\n  };\n  \n  const onResponse = (response) => {\n    return response;\n  };\n  \n  const onResponseError = async (error) => {\n    if (error.response) {\n      // Access Token was expired\n      if (\n        error.response.status === 401 &&\n        error.response.data.message === \"jwt expired\"\n      ) {\n        const storedToken = JSON.parse(localStorage.getItem(\"token\"));\n  \n        try {\n          const rs = await axios.post(`${API_URL}/refresh`, {\n            refresh_token: storedToken.refresh_token,\n          });\n  \n          const { token, user } = rs.data;\n  \n          localStorage.setItem(\"token\", JSON.stringify(token));\n          localStorage.setItem(\"user\", JSON.stringify(user));\n  \n          return;\n        } catch (_error) {\n          return Promise.reject(_error);\n        }\n      }\n    }\n    return Promise.reject(error);\n  };\n  \n  export const setupInterceptorsTo = ( axiosInstance ) => {\n    axiosInstance.interceptors.request.use(onRequest, onRequestError);\n    axiosInstance.interceptors.response.use(onResponse, onResponseError);\n    return axiosInstance;\n  };"]},"metadata":{},"sourceType":"module"}